"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4885],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={id:"unit-testing",title:"Unit Testing",sidebar_label:"Unit Testing",sidebar_position:1},a=void 0,l={unversionedId:"development/unit-testing",id:"development/unit-testing",title:"Unit Testing",description:"GraphQL ASP.NET has more than 3000 unit tests and 91% code coverage. Much of this is powered by a test component designed to quickly build a configurable, fully mocked server instance to perform a query. It may be helpful to download the code and extend it for harnessing your own controllers.",source:"@site/docs/development/unit-testing.md",sourceDirName:"development",slug:"/development/unit-testing",permalink:"/docs/development/unit-testing",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"unit-testing",title:"Unit Testing",sidebar_label:"Unit Testing",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Debugging",permalink:"/docs/development/debugging"},next:{title:"Entity Framework",permalink:"/docs/development/entity-framework"}},s={},u=[{value:"Create a Test Server",id:"create-a-test-server",level:2},{value:"Execute a Query",id:"execute-a-query",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL ASP.NET has more than ",(0,o.kt)("inlineCode",{parentName:"p"},"3000 unit tests and 91% code coverage"),". Much of this is powered by a test component designed to quickly build a configurable, fully mocked server instance to perform a query. It may be helpful to download the code and extend it for harnessing your own controllers."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"TestServerBuilder<TSchema>")," can be found in the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-aspnet-testframework")," project of the primary repo and is dependent on ",(0,o.kt)("inlineCode",{parentName:"p"},"Moq"),". As its part of the core library solution you'll want to remove the project reference to ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-aspnet")," project and instead add a reference to the nuget package."),(0,o.kt)("p",null,"This document explains how to perform some common test functions for your own controller methods."),(0,o.kt)("h2",{id:"create-a-test-server"},"Create a Test Server"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a new instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"TestServerBuilder"),". The builder takes in a set of flags to perform some auto configurations for common scenarios such as exposing exceptions or altering the casing of graph type names.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Configure your test scenario"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},".User")," to add any permissions to the mocked user account"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},".Authorization")," to add any security policy definitions if you wish to test security"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},".AddGraphQL()")," to mimic the functionality of schema configuration used when your application starts."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"TestServerBuilder")," implements ",(0,o.kt)("inlineCode",{parentName:"li"},"IServiceCollection"),", add any additional mocked services as needed to ensure your controllers are wired up correctly by the runtime."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Build the server instance using ",(0,o.kt)("inlineCode",{parentName:"p"},".Build()")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Configuring a Test Server Instance"',title:'"Configuring',a:!0,Test:!0,Server:!0,'Instance"':!0},"[Test]\npublic async Task MyController_InvocationTest()\n{\n    var builder = new TestServerBuilder();\n    builder.AddGraphQL(o => {\n        o.AddController<MyController>();\n    });\n\n    var server = builder.Build();\n    //...\n}\n\n")),(0,o.kt)("h2",{id:"execute-a-query"},"Execute a Query"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Mock the query execution context (the object that the runtime acts on) using ",(0,o.kt)("inlineCode",{parentName:"li"},".CreateQueryContextBuilder()")),(0,o.kt)("li",{parentName:"ol"},"Configure the text, variables etc. on the builder."),(0,o.kt)("li",{parentName:"ol"},"Build the context and submit it for processing:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"server.ExecuteQuery()")," to process the context. ",(0,o.kt)("inlineCode",{parentName:"li"},"context.Result")," will be filled with the final ",(0,o.kt)("inlineCode",{parentName:"li"},"IQueryExecutionResult")," which can be inspected for resultant data fields and error messages."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"server.RenderResult()")," to generate the json string a client would recieve if they performed the query.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Executing a Test Query"',title:'"Executing',a:!0,Test:!0,'Query"':!0},'[Test]\npublic async Task MyController_InvocationTest()\n{\n    // ...\n    var server = builder.Build();\n    var contextBuilder = server.CreateQueryContextBuilder();\n    contextBuilder.AddQueryText("query { controller { actionMethod { property1 } } }");\n\n    var context = contextBuilder.Build();\n    var result = await server.RenderResult(context);\n\n    /* result contains the string for:\n    {\n        "data" : {\n            "controller": {\n                "actionMethod" : {\n                    "property1" : "value1"\n                }\n            }\n        }\n    }\n    */\n}\n\n')))}p.isMDXComponent=!0}}]);