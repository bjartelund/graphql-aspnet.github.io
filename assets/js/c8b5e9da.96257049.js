"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,y=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(y,i(i({ref:t},u),{},{components:n})):a.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5927:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const l={id:"list-non-null",title:"List & Non-Null",sidebar_label:"List & Non-Null",sidebar_position:6},i=void 0,o={unversionedId:"types/list-non-null",id:"types/list-non-null",title:"List & Non-Null",description:"In addition to the six fundamental graph types, GraphQL contains two meta graph types: LIST and NON_NULL.",source:"@site/docs/types/list-non-null.md",sourceDirName:"types",slug:"/types/list-non-null",permalink:"/docs/types/list-non-null",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"list-non-null",title:"List & Non-Null",sidebar_label:"List & Non-Null",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Scalars",permalink:"/docs/types/scalars"},next:{title:"Subscriptions",permalink:"/docs/advanced/subscriptions"}},p={},s=[{value:"Type Expressions",id:"type-expressions",level:2},{value:"Overriding Type Expressions",id:"overriding-type-expressions",level:3}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In addition to the six fundamental graph types, GraphQL contains two meta graph types: ",(0,r.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/#lists-and-non-null"},"LIST and NON_NULL"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NON_NULL")," : Indicates that the Graph Type its describing must not be a null value, be that as an input argument or returned from a field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"LIST"),": Indicates that GraphQL should expect a collection of objects instead of just a single item.")),(0,r.kt)("p",null,'These meta types aren\'t anything concrete like a scalar or an enum. Instead they "wrap" another graph type (such as ',(0,r.kt)("inlineCode",{parentName:"p"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Donut"),"). They are used to describe the usage of a graph type in a field or input argument:"),(0,r.kt)("p",null,"For example, we would say:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"A field that returns a ',(0,r.kt)("inlineCode",{parentName:"li"},"Float"),' number."'),(0,r.kt)("li",{parentName:"ul"},'"A field that must return a ',(0,r.kt)("inlineCode",{parentName:"li"},"Person"),'."'),(0,r.kt)("li",{parentName:"ul"},'"An input argument that must be a ',(0,r.kt)("inlineCode",{parentName:"li"},"Date"),'."')),(0,r.kt)("p",null,"We can even describe complex scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"A field that ',(0,r.kt)("strong",{parentName:"li"},"might")," return a collection of ",(0,r.kt)("inlineCode",{parentName:"li"},"persons")," but when returned, each person ",(0,r.kt)("strong",{parentName:"li"},"must"),' be a valid reference."'),(0,r.kt)("li",{parentName:"ul"},'"An input argument that ',(0,r.kt)("strong",{parentName:"li"},"must")," be a list that contains lists of ",(0,r.kt)("inlineCode",{parentName:"li"},"integers"),'." (e.g. ',(0,r.kt)("inlineCode",{parentName:"li"},"[[1, 2], [5, 15]]"),")")),(0,r.kt)("h2",{id:"type-expressions"},"Type Expressions"),(0,r.kt)("p",null,'Together these "wrappers" make up a field\'s ',(0,r.kt)("inlineCode",{parentName:"p"},"Type Expression"),". GraphQL ASP.NET will automatically infer a type expression for every field and every input argument when generating your schema."),(0,r.kt)("p",null,"The following assumptions about your data are made when creating type expressions:"),(0,r.kt)("p",null,"\u2705  Reference types ",(0,r.kt)("strong",{parentName:"p"},"can be")," null ",(0,r.kt)("br",null),"\n\u2705  Value types ",(0,r.kt)("strong",{parentName:"p"},"cannot be")," null ",(0,r.kt)("br",null),"\n\u2705  Nullable value types (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"int?"),") ",(0,r.kt)("strong",{parentName:"p"},"can be")," null ",(0,r.kt)("br",null),"\n\u2705  When a reference type implements ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<TType>"),' it will be expressed as a "list of ',(0,r.kt)("inlineCode",{parentName:"p"},"TType"),'"'),(0,r.kt)("p",null,"Type Expressions are commonly shown in the GraphQL schema syntax for field definitions. Here are a few examples of a .NET type and its equivalent type expression in schema syntax."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},".NET Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Type Expression"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Int!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"float?"),(0,r.kt)("td",{parentName:"tr",align:null},"Float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IEnumerable","<","Person",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[Person]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Person[]"),(0,r.kt)("td",{parentName:"tr",align:null},"[Person]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"List","<","bool",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[Boolean!]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IReadOnlyList","<","long",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[Long!]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IReadOnlyList","<","long?",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[Long]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IEnumerable","<","List","<","ICollection","<","Donut",">",">",">"),(0,r.kt)("td",{parentName:"tr",align:null},"[[","[Donut]","]]")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," indicates NON_NULL and ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," for a LIST.")),(0,r.kt)("h3",{id:"overriding-type-expressions"},"Overriding Type Expressions"),(0,r.kt)("p",null,"You may need to override the default behavior from time to time. For instance, a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", which is a reference type, is nullable by default but you may want to enforce non-nullability at the query level and declare that null is not valid for a given argument. Or, perhaps, an object implements ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable")," but you don't want graphql to treat it as a list."),(0,r.kt)("p",null,"You can override the default type expression of any field or argument by defining a ",(0,r.kt)("a",{parentName:"p",href:"../advanced/type-expressions"},"custom type expression")," when needed."))}d.isMDXComponent=!0}}]);