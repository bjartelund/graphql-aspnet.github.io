"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8359],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),o=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},s=function(e){var n=o(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=o(t),y=r,d=m["".concat(p,".").concat(y)]||m[y]||c[y]||l;return t?a.createElement(d,u(u({ref:n},s),{},{components:t})):a.createElement(d,u({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,u=new Array(l);u[0]=y;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:r,u[1]=i;for(var o=2;o<l;o++)u[o]=t[o];return a.createElement.apply(null,u)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},5971:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const l={id:"enums",title:"Enums",sidebar_label:"Enums",sidebar_position:4},u=void 0,i={unversionedId:"types/enums",id:"types/enums",title:"Enums",description:"The ENUM graph type is represented by an enum type in .NET. The naming and exclusion rules used with object types apply in the same manner to enums.",source:"@site/docs/types/enums.md",sourceDirName:"types",slug:"/types/enums",permalink:"/docs/types/enums",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"enums",title:"Enums",sidebar_label:"Enums",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Unions",permalink:"/docs/types/unions"},next:{title:"Scalars",permalink:"/docs/types/scalars"}},p={},o=[{value:"Excluding an Enum Value",id:"excluding-an-enum-value",level:2},{value:"Custom Type Name",id:"custom-type-name",level:2},{value:"Custom Value Names",id:"custom-value-names",level:2}],s={toc:o};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ENUM")," graph type is represented by an ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," type in .NET. The naming and exclusion rules used with ",(0,r.kt)("a",{parentName:"p",href:"./objects"},"object types")," apply in the same manner to enums."),(0,r.kt)("p",null,"By Default:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("inlineCode",{parentName:"li"},"ENUM")," graph type will have the same name as its ",(0,r.kt)("inlineCode",{parentName:"li"},"enum")," type in your code."),(0,r.kt)("li",{parentName:"ul"},"All declared enum values are included, including compound values.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n}\n")),(0,r.kt)("p",null,"Compound Values are represented as their own enum value option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n    Filled = Custard | Jelly\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n  FILLED\n}\n")),(0,r.kt)("h2",{id:"excluding-an-enum-value"},"Excluding an Enum Value"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"[GraphSkip]")," attribute to omit a value from the schema. A query will be rejected if it attempts to submit an omitted enum value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},"public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n\n    [GraphSkip]\n    SugarCoated,\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n}\n")),(0,r.kt)("h2",{id:"custom-type-name"},"Custom Type Name"),(0,r.kt)("p",null,"Like with other graph types use the ",(0,r.kt)("inlineCode",{parentName:"p"},"[GraphType]")," attribute to indicate a custom name for the enumeration in the object graph."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},'[GraphType("Donut_Type")]\npublic enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n    SugarCoated,\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum Donut_Type {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGARCOATED\n}\n")),(0,r.kt)("h2",{id:"custom-value-names"},"Custom Value Names"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"[GraphEnumValue]")," to declare a custom name for the enum value and GraphQL will automatically handle the name translation when parsing a query document. A target schema's naming format rules will be applied and enforced on the name provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="DonutType.cs"',title:'"DonutType.cs"'},'public enum DonutType\n{\n    Glazed,\n    Cake,\n    Custard,\n    Jelly,\n\n    [GraphEnumValue("Sugar_Coated")]\n    SugarCoated,\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="DonutType Type Definition"',title:'"DonutType',Type:!0,'Definition"':!0},"enum DonutType {\n  GLAZED\n  CAKE\n  CUSTARD\n  JELLY\n  SUGAR_COATED\n}\n")))}m.isMDXComponent=!0}}]);